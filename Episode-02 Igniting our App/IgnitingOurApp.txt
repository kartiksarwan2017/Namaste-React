npm does not have a full form.
npm manages packages but it does not stands for node package manager.

Package.json is the configuration for the npm.

Why do we need package.json 

npm manages all the packages that we will install in our system.
these packages are same as dependencies.

Bundler
webpack
parcel
vite

Job of Bundles
packages our app to shift to production.

There are two types of dependencies that we can install:
1. dev-dependencies => It is generally required in development phase
2. normal dependencies => used in production also.

Caret and Tilde in package.json
package and package-lock.json difference

node_modules
contains all the code what we fetched from the npm.
transitive dependencies
  
If you have package.json and package-lock.json you can recreate all your node_modules.
Whatever you can regenerate don't put it on git.


You should not commit node_modules to Git because:
It can be very large
It can be regenerated from package.json and package-lock.json using npm install

🟢 What is @ in folder names?
If a folder in node_modules starts with @, it means it is a scoped package.

Think of it like a surname (last name) for packages.
🔹 Without @ → just a normal package (like express, axios)
🔹 With @scope → package belongs to a group or team

Just like we have npm similarly we have something known as npx 
npx means executing the packages.
npm is used to install the packages.

CDN link is not the preferred way to bring React and ReactDOM into your project.

Parcel 
    Dev Build
    Local Server
    HMR - Hot Module Replacement
    File Watching Algorithm - Written in C++
    Caching - Faster Builds 
    Image Optimization
    Minification
    Bundling
    Compress
    Consistent Hashing
    Code Splitting
    Differential Bundling - support older browsers.
    Diagnostics
    Error Handling
    HTTPs Hosting
    Tree Shaking - remove unused code
    Different dev and prod Bundles

    https://parceljs.org/


Theory Assignment

Q 1 What is NPM ?
Its is default package mananger for javascript's runtime Nodejs.

NPM consists of two main parts:
1. a CLI (command line interface) tool for publishing and downloading packages.
2. an online repository that hosts Javascript packages.

Here’s a simple breakdown of **npm** and what it does:

---

### 📦 What is npm?

* **npm** stands for **Node Package Manager** – although it’s officially a recursive acronym meaning **“npm is not an acronym”** ([geeksforgeeks.org][1], [en.wikipedia.org][2]).
* It’s **the default tool that comes with Node.js** for managing JavaScript code libraries (called “packages” or “modules”) .

---

### Why use npm?

1. **Reuses code so you don’t reinvent the wheel:**
   Instead of writing common features yourself—like handling dates, making HTTP calls, or working with files—you can use packages made by others. npm lets you easily download and use them .

2. **Keeps your projects organized:**
   npm keeps track of exactly which packages (and which versions) your project needs. This makes it easy for colleagues to set up the same environment using one command.

3. **Saves time with scripts:**
   You can define commands for building your project, testing it, or running it in development mode—all in one file called `package.json`. Then you just run `npm run build`, `npm test`, etc. ([nodejs.org][3]).

---

### 🛠️ The basics—how it works

| Task                         | Command                        | What it does                                                                                                            |
| ---------------------------- | ------------------------------ | ----------------------------------------------------------------------------------------------------------------------- |
| Install packages locally     | `npm install <package-name>`   | Downloads a package into your project under a folder called `node_modules` ([geeksforgeeks.org][4], [w3schools.com][5]) |
| Install all project packages | `npm install`                  | Reads `package.json`, installs everything listed                                                                        |
| Install globally             | `npm install -g <package>`     | Makes a tool available anywhere on your computer (e.g., `npm install -g http-server`)                                   |
| Update packages              | `npm update`                   | Refreshes your packages to newer compatible versions                                                                    |
| Remove packages              | `npm uninstall <package-name>` | Deletes a package you no longer need                                                                                    |

---

### 🔒 Version control & consistency

* npm uses **semantic versioning** (major.minor.patch) to keep track of versions. This helps avoid breaking changes when updating packages .
* It also creates a `package-lock.json` file, which pins the exact versions used—making sure everyone on your team and every deployment stays consistent .

---

### 🚀 Beyond installing packages

* **Publishing your own modules:**
  You can create your own package and publish it to the npm registry for others to use. That just involves setting up `package.json` with `npm init`, writing your code, and running `npm publish` ([geeksforgeeks.org][1]).

* **Auditing for security issues:**
  Newer versions of npm can scan your project’s dependencies for security vulnerabilities and suggest fixes ([en.wikipedia.org][2]).

---

### TL;DR

* **npm** is like a marketplace and toolbox for JavaScript code.
* Install, update, remove, and manage packages with simple commands.
* Manages versions and dependencies automatically to keep things reliable.
* Lets developers share tools and libraries easily across projects.

It's a core tool in modern JavaScript development—helping you build faster, safer, and with better organization. 😊

[1]: https://www.geeksforgeeks.org/node-js/what-is-npm-how-to-use-it/?utm_source=chatgpt.com "What is NPM & How to use it - GeeksforGeeks"
https://www.freecodecamp.org/news/what-is-npm-a-node-package-manager-tutorial-for-beginners/


Q 2 What is Parcel/Webpack? Why do we need it?

Great question! Let’s break down **Parcel** and **Webpack** in **simple terms**, and then explain **why we need them**.

---

## 🧰 What are Parcel and Webpack?

**Parcel** and **Webpack** are **JavaScript bundlers**.

### 📦 A bundler?

Think of a bundler like a **packing machine**. You give it:

* your main HTML file,
* your JavaScript, CSS, images, fonts, etc.,

and it bundles (combines) all of them into a few **optimized files** to be used in the browser.

---

## 📚 Why do we need a bundler?

When you build modern web apps:

* You write **many files** (JS modules, CSS files, images, etc.)
* You might use **new features** like ES6 `import`, `async/await`, JSX, SCSS, TypeScript, etc.

Browsers **don’t understand** these directly or efficiently.

### 🔧 A bundler helps by:

| Problem                             | What the bundler does                           |
| ----------------------------------- | ----------------------------------------------- |
| Multiple files and modules          | Combines them into one or few files             |
| Modern JavaScript not supported yet | Transpiles code using Babel                     |
| Large file size                     | Compresses (minifies) your code                 |
| Slow loading                        | Splits code (code-splitting) for faster loading |
| Manually linking files              | Automatically resolves and injects them         |

---

## 🚀 Parcel vs Webpack – in short

| Feature                | Parcel                         | Webpack                             |
| ---------------------- | ------------------------------ | ----------------------------------- |
| Setup                  | ⚡ Zero-config (just works)     | 🛠 Needs config (webpack.config.js) |
| Speed (small projects) | 🔥 Faster out-of-the-box       | 🐢 Slower unless optimized          |
| Plugins/Customization  | 🔄 Limited compared to Webpack | 🔧 Highly customizable              |
| Learning curve         | 👶 Beginner-friendly           | 🧠 More complex                     |

---

## 🧪 Example

You write:

```js
// index.js
import { add } from './math.js';
console.log(add(2, 3));
```

With Parcel or Webpack:

* They **resolve the `import`**, combine `index.js` and `math.js` into one file.
* Transpile the code (e.g., using Babel).
* Compress it.
* And output a `bundle.js` file that runs in all browsers.

---

## 📝 Summary

✅ **Parcel/Webpack** help you:

* Use modern code (ES6+, JSX, TS, etc.)
* Combine and optimize assets
* Automatically handle dependencies
* Prepare your project for production (faster loading, fewer files)

Without them, you'd manually manage imports, compatibility, performance optimizations, etc.—which is not fun or scalable.

Let me know if you want a visual flow or code demo!

Q 3 What is .parcel-cache ?

### 🗂️ What is `.parcel-cache`?

`.parcel-cache` is a **hidden folder** that **Parcel** creates automatically to **speed up your builds**.

---

### ⚙️ Why is it created?

When you build or run a project with Parcel (`npx parcel index.html`), it has to:

* Read and parse all your files (JS, CSS, HTML, images, etc.)
* Transpile modern JS (e.g. ES6 → ES5)
* Bundle and optimize assets
* Minify and generate final output

This takes time—especially in large projects.

To **avoid repeating work**, Parcel stores the **intermediate results** in `.parcel-cache`.

---

### 📦 What does it contain?

* Processed/transformed versions of your source files
* File hashes and metadata for cache validation
* Dependency graph (which files depend on what)

---

### 🚀 How does it help?

1. **Faster rebuilds**
   On next run, Parcel checks if your files changed:

   * If yes → rebuilds only those
   * If no → reuses cached versions from `.parcel-cache`

2. **Efficient hot module reload** during development
   (You make a small change → Parcel instantly reflects it)

---

### 🧽 Can I delete `.parcel-cache`?

Yes. Parcel will **recreate it** next time you build or serve the project.

You might want to delete it when:

* You face weird build issues
* You want a fresh clean build

You can do:

```bash
rm -rf .parcel-cache
```

---

### ✅ Summary

| Feature         | Description                         |
| --------------- | ----------------------------------- |
| `.parcel-cache` | Stores cached build output          |
| Purpose         | Speeds up future builds and reloads |
| Safe to delete  | Yes – will regenerate automatically |

Let me know if you'd like a visual breakdown of the build process!


Q 4 What is `npx` ?

### 🚀 What is `npx`?

`npx` is a **command-line tool** that comes with **Node.js** (since version 5.2.0 of npm).

It stands for:
**Node Package Execute**

---

### 🧠 In simple terms:

`npx` lets you **run Node.js packages (tools/libraries) without installing them globally** on your computer.

---

### 📦 Example:

You want to use **Parcel** just once:

```bash
npx parcel index.html
```

* This **downloads Parcel temporarily**, runs it, then removes it.
* No need to run `npm install -g parcel` (which installs it globally and clutters your system).

---

### 🪄 Why is `npx` useful?

| Without `npx`                                     | With `npx`             |
| ------------------------------------------------- | ---------------------- |
| Install package globally first (`npm install -g`) | Just run it directly   |
| Can clutter system with global packages           | Temporary, clean usage |
| Hard to test specific versions                    | Easily run any version |

---

### 🧪 Common use cases

| Use Case                     | Command Example                |
| ---------------------------- | ------------------------------ |
| Run Parcel (dev bundler)     | `npx parcel index.html`        |
| Run Create React App         | `npx create-react-app my-app`  |
| Run ESLint                   | `npx eslint yourfile.js`       |
| Run TypeScript compiler      | `npx tsc`                      |
| Run specific package version | `npx eslint@8.0.0 yourfile.js` |

---

### ⚠️ Is `npx` different from `npm`?

Yes!

| Tool  | Purpose                                             |
| ----- | --------------------------------------------------- |
| `npm` | Installs packages into your project or globally     |
| `npx` | **Runs** a package (doesn't necessarily install it) |

---

### ✅ Summary

* **`npx`** = run any npm package **without installing it globally**.
* Useful for running **one-time commands or tools**.
* Keeps your system clean and up-to-date.

Let me know if you want a demo or visual flow!

Q 4 What is difference between `dependencies` vs `devDependencies`

https://www.geeksforgeeks.org/node-js/difference-between-dependencies-devdependencies-and-peerdependencies/


Q 5 What is Tree Shaking?

https://medium.com/@omkarbhavare2406/optimizing-web-performance-tree-shaking-explained-007208163c88

Q 6 What is Hot Module Replacement?

### 🔥 What is **Hot Module Replacement (HMR)**?

**Hot Module Replacement (HMR)** is a feature in development tools like **Parcel**, **Webpack**, or **Vite** that:

> ✅ **Automatically updates the part of your code that changed — without refreshing the entire browser page.**

---

### 🧠 In Simple Terms:

Imagine you're building a web app and:

* You change the text color in your CSS file,
* Or you update some code in a React component...

With **HMR**:

* The **page doesn’t reload**
* Only the **changed code** is replaced instantly
* Your app **keeps its state** (like input values or scroll position)

---

### 🔁 Without HMR:

Every time you make a change:

1. The whole browser page reloads.
2. All app state is lost (e.g. form inputs reset).

### ⚡ With HMR:

1. Parcel/Webpack detects the exact file you changed.
2. It **injects only that part** into the browser.
3. Everything else stays the same — **super fast and smooth!**

---

### ✅ Benefits of HMR:

| Feature                | Benefit                           |
| ---------------------- | --------------------------------- |
| No full reload         | Faster development                |
| Keeps app state        | Saves time during testing         |
| Instant feedback       | Makes styling & UI changes easier |
| Less strain on browser | Only updates what's needed        |

---

### 🧪 Example

You're building a counter app:

```js
<button onClick={() => setCount(count + 1)}>+</button>
```

You click `+` a few times (count is 5).
Now you change the button color in your CSS.

**With HMR**:

* The new button color appears instantly.
* The counter **stays at 5** — state preserved!

---

### 🛠️ Tools that support HMR:

* Parcel (built-in)
* Webpack (with config)
* Vite (super fast HMR)
* React Fast Refresh (for React-specific HMR)

---

### 📝 Summary

| Term | Meaning                                                                      |
| ---- | ---------------------------------------------------------------------------- |
| HMR  | 🔄 Instantly update parts of your app in the browser **without full reload** |

It makes development faster, smoother, and more enjoyable!

Q 7 - List down your favourite 5 superpowers of Parcel and describe any 3 of them in your own words.


https://medium.com/@prajapatisonu50/react-interview-question-ea009970d083

    minification (removing indentation)
    image optimizations
    compression(renaming variables)
    cleaning our code
    super fast build
    dev and prod builds
    caching while development
    works with older version of browsers
    Https on dev as well npx parcel index.html ( — https)
    Consistent Hashing Algorithm
    Zero configuration
    Tree shaking — Removing unwanted code
    API proxy

Sure! Here's a **detailed and beginner-friendly explanation** of each of Parcel's 13 superpowers, written in a clear and practical way so you understand **what it does, why it matters, and how it helps** you as a developer.

---

## 🔥 1. **Minification (Removing spaces, indentation, and comments)**

### 🧠 What it is:

Minification is the process of **removing all unnecessary characters** (like spaces, tabs, comments, and line breaks) from your code **without changing how it works**.

### 🔧 Parcel does this:

* Automatically during **production builds** (`parcel build index.html`).
* So your final code is small and fast to load.

### ✅ Why it matters:

* Reduces **file size** → faster load time.
* Makes it **harder to reverse-engineer** your source code.
* Improves **performance** on slow networks.

---

## 🖼️ 2. **Image Optimization**

### 🧠 What it is:

Parcel can **automatically compress image files** like `.jpg`, `.png`, and `.svg` to reduce file size **without losing much quality**.

### 📸 Example:

An image of 1MB might be optimized to 300KB, loading **much faster** for users.

### ✅ Why it matters:

* Images are often the **heaviest parts** of a website.
* Optimized images = **faster websites** and **better SEO**.

---

## 🔐 3. **Compression (Renaming variables)**

### 🧠 What it is:

Parcel uses tools like **Terser** to rename variables and functions to **short one-letter names**.

### 📌 Example:

```js
let userData = 'John'; 
```

⬇️ becomes:

```js
let a = 'John';
```

### ✅ Why it matters:

* Smaller code means **faster downloads**.
* Great for performance-focused apps and mobile devices.

---

## 🧹 4. **Cleaning Your Code (Dead Code Elimination)**

### 🧠 What it is:

Parcel **removes unused code** that isn't used anywhere in your app.

### 📌 Example:

```js
import { add, subtract } from './math';
console.log(add(2, 3));
```

Since `subtract` is unused, it’s **removed** from the final build.

### ✅ Why it matters:

* Keeps your bundle **light and clean**.
* Avoids shipping unnecessary code to users.

---

## ⚡ 5. **Super Fast Builds**

### 🧠 What it is:

Parcel uses **multi-threading** (builds in parallel using all CPU cores) and smart **caching** to speed up builds.

### ✅ Why it matters:

* First build is fast, but **subsequent builds are blazing fast**.
* Instant feedback during development.

---

## 🔁 6. **Development vs Production Modes**

### 🧠 What it is:

Parcel automatically detects if you're:

* In **development mode** (`parcel index.html`)
* Or **production mode** (`parcel build index.html`)

### ✅ What changes:

| Mode | Features                          |
| ---- | --------------------------------- |
| Dev  | Source maps, HMR, readable code   |
| Prod | Minified, optimized, cleaned code |

No need to manually configure modes!

---

## 🧠 7. **Caching While Developing**

### 🧠 What it is:

Parcel stores previously processed files in a `.parcel-cache` folder.

### ✅ Why it matters:

* When you change just 1 file, Parcel **rebuilds only that file**, not everything.
* Saves tons of time, especially in large projects.

---

## 🌐 8. **Works with Older Browsers**

### 🧠 What it is:

Parcel supports tools like **Babel** to convert modern JavaScript (ES6+) into **older syntax (ES5)** that older browsers can understand.

### ✅ Why it matters:

* Your app works on **more devices** and browsers like Internet Explorer.
* You don’t need to write old code manually.

---

## 🔒 9. **HTTPS Dev Server**

### 🧠 What it is:

You can run Parcel's dev server over **HTTPS** using:

```bash
npx parcel index.html --https
```

### ✅ Why it matters:

* Required for testing **secure features** like:

  * Service Workers
  * Geolocation
  * Push Notifications

---

## 🏷️ 10. **Consistent Hashing Algorithm**

### 🧠 What it is:

Parcel adds **unique hash strings** to the names of files it builds:

```html
<script src="app.9ac32d.js"></script>
```

### ✅ Why it matters:

* Helps with **browser caching** — if a file hasn’t changed, the browser won’t re-download it.
* Ensures users always get the **latest version** when changes happen.

---

## ⚙️ 11. **Zero Configuration**

### 🧠 What it is:

You don’t need to create config files like `webpack.config.js` or `babel.config.js`.

Just run:

```bash
npx parcel index.html
```

And Parcel **magically figures out** what to do — including:

* JavaScript, CSS, HTML, images
* JSX, TypeScript, SCSS, and more!

---

## 🌲 12. **Tree Shaking**

### 🧠 What it is:

Parcel detects which parts of a module are **actually used**, and removes the unused parts from the final bundle.

### 📌 Example:

```js
import { add, subtract, multiply } from 'math-lib';
```

If you only use `add`, Parcel removes `subtract` and `multiply`.

### ✅ Why it matters:

* Smaller bundles.
* Faster load times.
* Cleaner code in production.

---

## 🌐 13. **API Proxying**

### 🧠 What it is:

Parcel can **proxy API calls** from your frontend to your backend server during development.

### 📌 Example:

```json
// package.json
"proxy": "http://localhost:5000"
```

Then in frontend:

```js
fetch('/api/products')
```

Parcel automatically sends the request to `http://localhost:5000/api/products`.

### ✅ Why it matters:

* No need for CORS setup in dev.
* Clean and simple API calls.

---

## ✅ Summary Table

| Feature             | What It Does                           | Why It’s Useful                    |
| ------------------- | -------------------------------------- | ---------------------------------- |
| Minification        | Removes spaces/comments                | Smaller & faster bundle            |
| Image Optimization  | Compresses images                      | Speeds up website loading          |
| Compression         | Renames variables                      | Saves space                        |
| Code Cleaning       | Removes unused code                    | Keeps bundles light                |
| Fast Build          | Caches and multi-threaded build        | Saves dev time                     |
| Dev/Prod Modes      | Auto-switches features based on mode   | Simplifies deployment              |
| Dev Caching         | Rebuilds only changed files            | Instant updates during development |
| Old Browser Support | Converts new JS to old JS              | Cross-browser compatibility        |
| HTTPS Support       | Dev server can run over HTTPS          | Useful for secure API testing      |
| File Hashing        | Adds hash to output filenames          | Great for browser caching          |
| Zero Config         | No setup needed                        | Saves time and confusion           |
| Tree Shaking        | Removes unused imports                 | Lighter, faster production builds  |
| API Proxying        | Redirects frontend requests to backend | Avoids CORS issues                 |

---

Q What is `.gitignore`? What should we add and not add into it?

https://www.freecodecamp.org/news/gitignore-what-is-it-and-how-to-add-to-repo/

.gitignore file is a text file where we can mention the files/directories to ignore. 
That is, those files/directories will not be pushed into the git repositories. 
The great advantage of putiing them in .gitignore file is that those can be huge in size and those files can be generated with the help of package.json or package-lock.json file. 
It's very important to put node_modules in the .gitignore file since it contains a lot of packages which can be installed later by using package.json file. Other directories that should be placed in .gitignore file are .parcel-cache and dist. package.json and package-lock.json must not be put in .gitignore file.

### 💡 What is `.gitignore`?

`.gitignore` is a special file used by **Git** to tell it which files and folders **not to track** or include in version control.
Git will **ignore everything listed** in this file — meaning it won't add, commit, or push them to your repository.

---

### ✅ What should you **add** to `.gitignore`?

You should add files and folders that are:

1. **System-specific or Editor-specific files**

   * OS-generated files:
     `Thumbs.db`, `.DS_Store`, `desktop.ini`
   * IDE/editor settings:
     `.vscode/`, `.idea/`, `*.sublime-workspace`

2. **Build files / Output files**

   * Compiled code:
     `*.class`, `*.o`, `*.exe`
   * Dist folders:
     `dist/`, `build/`, `out/`

3. **Dependency directories**

   * Installed packages:
     `node_modules/`, `vendor/`, `Pods/`

4. **Log and cache files**

   * Logs:
     `*.log`
   * Caches:
     `.cache/`, `.parcel-cache/`, `.eslintcache`

5. **Environment/config files with secrets**

   * API keys, DB credentials, tokens:
     `.env`, `.env.local`, `config/secrets.yml`

---

### ❌ What should you **NOT add** to `.gitignore`?

Avoid ignoring files that are:

1. **Source code or app logic**

   * Your `*.js`, `*.ts`, `*.py`, `*.java` files
   * Vue/React components, backend controllers, etc.

2. **Important config files**

   * Files needed to run/build the app:
     `package.json`, `webpack.config.js`, `.babelrc`

3. **Documentation and README files**

   * `README.md`, `LICENSE`, `docs/`

4. **Files necessary for the team**

   * Shared configs (like `.prettierrc`, `.eslintrc`) if your team needs to use the same rules

---

### 📝 Example `.gitignore` (for a Node.js + React project)

```gitignore
# dependencies
node_modules/

# build output
dist/
build/

# logs and caches
npm-debug.log*
yarn-debug.log*
.cache/
.parcel-cache/

# environment secrets
.env
.env.local

# editor and system files
.vscode/
.DS_Store
Thumbs.db
```

Q What is the difference between `package.json` and `package-lock.json`

https://vjnvisakh.medium.com/package-json-vs-package-lock-json-know-the-difference-like-a-pro-3a3127166386
https://www.geeksforgeeks.org/node-js/difference-between-package-json-and-package-lock-json-files/
https://medium.com/@prajapatisonu50/react-interview-question-ea009970d083


Q Why should I not modify `package-lock.json`?
You **should not manually modify `package-lock.json`** because it is an **auto-generated file** meant to ensure consistent dependency versions across different environments. Here's why:

---

### 🔒 What is `package-lock.json`?

It's a file automatically created by **npm** (Node Package Manager) when you run `npm install`. It:

* **Locks down the exact versions** of every installed package (and their dependencies).
* Ensures **reproducible builds** – everyone who installs your project gets the same versions.

---

### 🚫 Why you should **NOT** modify it manually:

1. **✅ Maintained by npm**

   * NPM manages this file to track versions. Manual edits can break the structure or create invalid states.

2. **💣 Risk of Dependency Conflicts**

   * Manually editing versions might mismatch what's in `package.json`, causing conflicts or runtime issues.

3. **🧪 Breaks Reproducibility**

   * The whole point of the lock file is to lock the state. Editing it defeats its purpose and might lead to inconsistent installs.

4. **🔄 Gets Overwritten**

   * Any manual change will likely be overwritten the next time someone runs `npm install`.

---

### ✅ If you need to change something:

* Use the proper `npm` commands:

  * `npm install some-package@version`
  * `npm uninstall some-package`
  * `npm update`
* These will update both `package.json` and `package-lock.json` properly.

---

### TL;DR

> ❌ Don't touch `package-lock.json` by hand.
> ✅ Let npm manage it. Use commands like `npm install` or `npm update` to make changes.

Would you like an example of how changes in `package.json` and `package-lock.json` relate?


Q What is `node_modules` ? Is it a good idea to push that on git?

https://www.freecodecamp.org/news/what-are-node-modules/

  Module in JS: 
  a module is a piece of reusable Javascript Code.

https://www.geeksforgeeks.org/git/how-to-ignore-node_modules-folder-in-git/


Q What is the `dist` folder?

Its stands for distribution and is the minfied or concatenated version it has been actually used on production sites.

https://www.geeksforgeeks.org/javascript/what-is-the-role-of-src-and-dist-folders-in-javascript-jquery/

Q What is `browserlists` ?
   Browserslist is a configuration tool used in modern front-end development to specify which browsers your project supports.

   It’s not a tool by itself, but a shared config used by many tools like:

   Autoprefixer (adds vendor prefixes in CSS)

   Babel (transpiles modern JS to older versions)

   PostCSS

   Parcel, Webpack, ESLint, etc.


Q Read about dif bundlers: vite, webpack, parcel
Q Read about: ^ - caret and ~ - tilda
Q Read about Script types in html (MDN Docs)

https://npm-compare.com/parcel,snowpack,vite,webpack
https://www.geeksforgeeks.org/javascript/difference-between-tilde-and-caret-in-package-json/
https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/script/type


